import { isArmCommonType } from "@azure-tools/typespec-azure-resource-manager";
import { getProperty, isArrayModelType, } from "@typespec/compiler";
import { getExtensions } from "@typespec/openapi";
import { reportDiagnostic } from "../lib.js";
/**
 * Validate array have @extension("x-ms-identifiers", <key>) specified.
 */
export function createArrayIdentifiersRule(program) {
    return {
        modelProperty: (property) => {
            const type = property.type;
            if (type.kind === "Model" && isArrayModelType(program, type)) {
                if (isArrayMissingIdentifier(program, type, property)) {
                    reportDiagnostic(program, {
                        code: "no-identifier-property-in-array-item",
                        target: property,
                    });
                }
            }
        },
    };
}
function isArrayMissingIdentifier(program, array, property) {
    const elementType = array.indexer.value;
    if (elementType.kind !== "Model") {
        return false;
    }
    if (isArmCommonType(elementType)) {
        return false;
    }
    if (getProperty(elementType, "id")) {
        return false;
    }
    const xmsIdentifiers = getExtensions(program, property !== null && property !== void 0 ? property : array).get("x-ms-identifiers");
    if (xmsIdentifiers === undefined) {
        return true;
    }
    if (Array.isArray(xmsIdentifiers)) {
        for (const prop of xmsIdentifiers) {
            if (typeof prop === "string") {
                if (!elementType.properties.has(prop)) {
                    reportDiagnostic(program, {
                        code: "x-ms-identifiers-invalid-value",
                        messageId: "missingProperty",
                        format: { propertyName: prop, targetModelName: elementType.name },
                        target: property,
                    });
                }
            }
            else {
                reportDiagnostic(program, {
                    code: "x-ms-identifiers-invalid-value",
                    messageId: "notArray",
                    format: { valueType: typeof prop },
                    target: property,
                });
            }
        }
    }
    else {
        reportDiagnostic(program, {
            code: "x-ms-identifiers-invalid-value",
            messageId: "notArray",
            format: { valueType: typeof xmsIdentifiers },
            target: property,
        });
    }
    return false;
}
//# sourceMappingURL=array-identifiers.js.map