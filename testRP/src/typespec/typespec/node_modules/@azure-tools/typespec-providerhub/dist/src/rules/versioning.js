import { getAddedOnVersions, getMadeOptionalOn, getRemovedOnVersions, getRenamedFromVersions, } from "@typespec/versioning";
import { reportDiagnostic } from "../lib.js";
/**
 * Validation related to versioning.
 */
export function createVersioningRule(program) {
    return {
        model: checkBadVersioningPattern,
        modelProperty: checkBadVersioningPatternForProperty,
        operation: checkBadVersioningPattern,
    };
    function checkBadVersioningPattern(type) {
        if (getRemovedOnVersions(program, type) !== undefined) {
            reportBreakingVersioning("@removed", type);
        }
        if (getRenamedFromVersions(program, type) !== undefined) {
            reportBreakingVersioning("@renamedFrom", type);
        }
    }
    function checkBadVersioningPatternForProperty(modelProperty) {
        checkBadVersioningPattern(modelProperty);
        if (getAddedOnVersions(program, modelProperty) !== undefined && !modelProperty.optional) {
            reportDiagnostic(program, {
                code: "non-breaking-versioning",
                messageId: "addedRequired",
                target: modelProperty,
            });
        }
        if (getMadeOptionalOn(program, modelProperty) !== undefined &&
            modelProperty.default === undefined) {
            reportDiagnostic(program, {
                code: "non-breaking-versioning",
                messageId: "optionalNoDefault",
                target: modelProperty,
            });
        }
    }
    function reportBreakingVersioning(action, target) {
        reportDiagnostic(program, {
            code: "non-breaking-versioning",
            format: { action },
            target,
        });
    }
}
//# sourceMappingURL=versioning.js.map