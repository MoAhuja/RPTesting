import { createRule } from "@typespec/compiler";
import { getHeaderFieldOptions, getQueryParamOptions } from "@typespec/http";
import { isExcludedCoreType } from "./utils.js";
export const preferCsvCollectionFormatRule = createRule({
    name: "prefer-csv-collection-format",
    description: `It is recommended to use "csv" for collection format of parameters.`,
    severity: "warning",
    messages: {
        default: `It is recommended to use "csv" for collection format of parameters.`,
    },
    create(context) {
        return {
            modelProperty: (property) => {
                if (isExcludedCoreType(context.program, property))
                    return;
                const headerOptions = getHeaderFieldOptions(context.program, property);
                const queryOptions = getQueryParamOptions(context.program, property);
                if (((headerOptions === null || headerOptions === void 0 ? void 0 : headerOptions.format) !== undefined && (headerOptions === null || headerOptions === void 0 ? void 0 : headerOptions.format) !== "csv") ||
                    ((queryOptions === null || queryOptions === void 0 ? void 0 : queryOptions.format) !== undefined && (queryOptions === null || queryOptions === void 0 ? void 0 : queryOptions.format) !== "csv")) {
                    context.reportDiagnostic({
                        target: property,
                    });
                }
            },
        };
    },
});
//# sourceMappingURL=prefer-csv-collection-format.js.map