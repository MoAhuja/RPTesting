import { DecoratorContext, Enum, EnumMember, Namespace, Program, Type } from "@typespec/compiler";
export interface ArmCommonTypeVersions {
    type: Enum;
    allVersions: EnumMember[];
}
export declare function getArmCommonTypesVersions(program: Program): ArmCommonTypeVersions | undefined;
/**
 * Check if a given model or model property is an ARM common type.
 * @param {Type} entity - The entity to be checked.
 *  @return {boolean} - A boolean value indicating whether an entity is an ARM common type.
 */
export declare function isArmCommonType(entity: Type): boolean;
/**
 * `@armCommonTypesVersion` sets the ARM common-types version used by the service.
 * @param {DecoratorContext} context DecoratorContext object
 * @param {type} entity Target of the decorator. Must be `Namespace` or `EnumMember` type
 */
export declare function $armCommonTypesVersion(context: DecoratorContext, entity: Namespace | EnumMember, version: string | EnumMember): void;
/**
 * Returns the ARM common-types version used by the service.
 * @param {DecoratorContext} context DecoratorContext object
 * @param {type} entity Target of the decorator. Must be `Namespace` or `EnumMember` type
 */
export declare function getArmCommonTypesVersion(program: Program, entity: Namespace | EnumMember): string | undefined;
//# sourceMappingURL=common-types.d.ts.map