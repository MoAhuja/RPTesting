// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated />

{{#with this as |res|}}
using System;
using Microsoft.Extensions.Logging;

namespace {{nameSpace}}.Service.Controllers
{
    public abstract partial class {{res.name}}ControllerBase
    {
        private static Action<ILogger, Exception> _logRequestNull;
{{#if (and res.resourceTypePath includeSubscriptionLifeCycleController)}}
        private static Action<ILogger, Exception> _logSubLifeCycleNotification;
{{/if}}
{{#each operations as |operation operationIndex|}}
        private static Action<ILogger, Exception> _logValidate{{getOperationAction operation}};
        private static Action<ILogger, Exception> _logBegin{{getOperationAction operation}};
{{#if (ne (getOperationAction operation) "Read")}}
        private static Action<ILogger, Exception> _logEnd{{getOperationAction operation}};
{{/if}}
{{/each}}

        private static void InitializeLogger()
        {
            _logRequestNull = LoggerMessage.Define(
                LogLevel.Error,
                new EventId(1, "RequestIsNull"),
                "Request is null");
{{#if (and res.resourceTypePath includeSubscriptionLifeCycleController)}}
            _logSubLifeCycleNotification = LoggerMessage.Define(
                LogLevel.Information,
                new EventId(2, "SubscriptionLifeCycleNotification"),
                "SubscriptionLifeCycleNotification()");
{{/if}}
{{#each operations as |operation operationIndex|}}
            _logValidate{{getOperationAction operation}} = LoggerMessage.Define(
                LogLevel.Information,
                new EventId({{increment operationIndex}}1, "ValidateOperation"),
                "Validate{{getOperationAction operation}}Async()");
            _logBegin{{getOperationAction operation}} = LoggerMessage.Define(
                LogLevel.Information,
                new EventId({{increment operationIndex}}2, "BeginOperation"),
                "Begin{{getOperationAction operation}}Async()");
{{#if (ne (getOperationAction operation) "Read")}}
            _logEnd{{getOperationAction operation}} = LoggerMessage.Define(
                LogLevel.Information,
                new EventId({{increment operationIndex}}3, "EndOperation"),
                "End{{getOperationAction operation}}Async()");
{{/if}}
{{/each}}
        }
    }
}
{{/with}}
