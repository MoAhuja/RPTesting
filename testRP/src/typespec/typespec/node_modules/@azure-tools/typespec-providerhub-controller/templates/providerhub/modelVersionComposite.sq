// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated />

using System;
using System.ComponentModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Microsoft.TypeSpec.ProviderHub.Controller;

namespace Microsoft.{{serviceName}}.Service.Models
{
    /// <summary>
    /// The version information for a {{name}}.
    /// </summary>
    public partial class {{name}}VersionInfo : ResourceVersionInfo
    {
        /// <summary>
        /// Create versioning info for a {{name}}
        /// </summary>
        /// <param name="wrapped">The version info of the ancestor versioned class</param>
        public {{name}}VersionInfo({{name}} instance, ResourceVersionInfo wrapped)
        {
            OnBeforeInitialize(instance, wrapped);
            ContractProperties = new ResourceContractProperties(Type, VersionComparer, wrapped?.ContractProperties, GetBaseModelVersion);
            OnAfterInitialize(instance, wrapped);
        }

        /// <summary>
        /// Extensibility point - perform operations on the version info before it is initialized
        /// </summary>
        /// <param name="instance">The {{name}} being tracked</param>
        /// <param name="wrappedVersionInfo">Since an ancestor class is also versioned, the version info for that class</param>
        partial void OnBeforeInitialize({{name}} instance, ResourceVersionInfo wrappedVersionInfo);

        /// <summary>
        /// Extensibility point - perform operations on the version info after it is initialized
        /// </summary>
        /// <param name="instance">The {{name}} being tracked</param>
        /// <param name="wrappedVersionInfo">Since an ancestor class is also versioned, the version info for that class</param>
        partial void OnAfterInitialize({{name}} instance, ResourceVersionInfo wrappedVersionInfo);

        /// <summary>
        /// The version comparer for this type.
        /// </summary>
        public override VersionComparer VersionComparer => VersionedSerializer.Instance.ServiceVersionComparer;

        /// <summary>
        /// The target type for this version info
        /// </summary>
        public override Type Type => typeof({{name}});

        /// <summary>
        /// The chain of resource contract properties that determine version info
        /// </summary>
        public override ResourceContractProperties ContractProperties { get; } 

        /// <summary>
        /// The last deserialized version of the tracked resource
        /// </summary>
        public override string LastDeserializedVersion { get; set; }

        string GetBaseModelVersion(Type type, string version)
        {
            return VersionedSerializer.Instance.GetModelVersion(type, version);
        }
    }
}
