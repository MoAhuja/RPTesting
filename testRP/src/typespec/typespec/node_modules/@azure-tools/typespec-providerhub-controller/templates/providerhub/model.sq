// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated />

using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using Microsoft.TypeSpec.ProviderHub.Controller;
{{#if (and discriminatorInfo (ne discriminatorBaseType.namespace namespace))}}
using {{discriminatorBaseType.namespace}};
{{/if}}

namespace {{nameSpace}}.Service.Models
{
{{#if discriminatorInfo}}
    [Discriminator(DiscriminatorPropertyName, DiscriminatorValue)]
    [JsonConverter(typeof(DiscriminatorJsonConverter<{{discriminatorInfo.baseType.name}}>))]
{{/if}}
{{#if description}}
    /// <summary>
    {{> renderComment content=description}} 
    /// </summary>
{{/if}}
    public {{#if discriminatorInfo}}{{#if (eq discriminatorInfo.value "")}}abstract {{/if}}{{/if}}partial class {{name}}{{#if (or isDerivedType isImplementer)}} : {{#if baseClass}}{{baseClass.name}}{{#if baseClass.typeParameters}}<{{typeParamList baseClass}}>{{/if}}{{/if}}{{#if implements}}{{#if isDerivedType}}, {{/if}}{{joinByName implements ", "}}{{/if}}{{/if}}
    {{curly true}}{{#if discriminatorInfo}}
        // Discriminator value
        private const string DiscriminatorValue = "{{discriminatorInfo.value}}";{{#if (eq discriminatorInfo.value "")}}

        // Discriminator property name
        protected const string DiscriminatorPropertyName = "{{discriminatorInfo.propertyName}}";{{/if}}{{/if}}

        /// <summary>
        /// Extensibility point - allows changing class properties during construction.
        /// </summary>
        partial void OnBeforeInitialize();

        /// <summary>
        /// Extensibility point - allows changing class properties during construction.
        /// </summary>
        partial void OnAfterInitialize();

        /// <summary>
        /// Initializes a new instance of the {{name}} class.
        /// </summary>
        public {{name}}()
        {
            OnBeforeInitialize();
{{#if (and discriminatorInfo discriminatorInfo.value)}}
            {{csharpname discriminatorInfo.propertyName}} = DiscriminatorValue;
{{/if}}
{{#if (and isVersioned (not hasVersionedAncestor))}}
            VersionInfo = new {{name}}VersionInfo(this);
{{/if}}
{{#if (and isVersioned hasVersionedAncestor)}}
            VersionInfo = new {{name}}VersionInfo(this, VersionInfo);
{{/if}}
            OnAfterInitialize();
        }

{{#each properties}}
{{#if description}}
        /// <summary>
        {{> renderComment content=description}} 
        /// </summary>
{{/if}}
{{#if versions}}
{{#each versions}}
        [{{name}}("{{onVersion}}")]
{{/each}}
{{/if}}
{{#if validations}}
{{#each validations}}
        [{{name}}({{#each parameters}}{{#if (eq type "string")}}@"{{/if}}{{value}}{{#if (eq type "string")}}"{{/if}}{{#unless @last}}, {{/unless}}{{/each}})]
{{/each}}
{{/if}}
{{#if converters}}
{{#each converters}}
        [JsonConverter(typeof({{name}}))]
{{/each}}
{{/if}}
        [JsonProperty("{{serializedName}}")]
        public {{type.name}}{{#if type.typeParameters}}<{{typeParamList type}}>{{/if}} {{name}} { get; set; }{{#if default}} = {{default}};{{/if}}
{{#unless @last}}

{{/unless}}{{/each}}
{{#if (and isVersioned (not hasVersionedAncestor))}}
        /// <summary>
        /// The version information for this class.
        /// </summary>
        [JsonIgnore]
        public ResourceVersionInfo VersionInfo { get; set; }{{/if}}
{{#if isSerialized}}
{{#if isVersioned}}

{{/if}}
        /// <summary>
        /// Tracks deserialization of the resource.
        /// </summary>
        [JsonIgnore]
        public ResourceSerializationInfo SerializationInfo { get; set; } = new DefaultSerializationInfo();{{/if}}
    }
}
