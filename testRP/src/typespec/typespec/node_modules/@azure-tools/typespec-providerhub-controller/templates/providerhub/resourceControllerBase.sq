// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated />

{{#with this as |res|}}
using System;
using System.Net;
{{#if res.includeCancellationToken}}
using System.Threading;
{{/if}}
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Microsoft.TypeSpec.ProviderHub;
using Microsoft.TypeSpec.ProviderHub.Controller;
{{#if (and res.resourceTypePath includeSubscriptionLifeCycleController)}}
using Microsoft.TypeSpec.ProviderHub.Controller.SubscriptionLifeCycle;
{{/if}}
using {{nameSpace}}.Service.Models;

namespace {{nameSpace}}.Service.Controllers
{
    /// <summary>
    /// Controller for user RP operations on the {{res.name}} resource.
    /// </summary>
    [ApiController]
    public abstract partial class {{res.name}}ControllerBase : ResourceControllerBase
    {
        protected readonly ILogger<{{res.name}}ControllerBase> _logger;

        static {{res.name}}ControllerBase()
        {
            InitializeLogger();
        }

        protected {{res.name}}ControllerBase(ILogger<{{res.name}}ControllerBase> logger)
        {
            _logger = logger;
        }

{{#each operations as |operation operationIndex|}}
{{#if (getOperationAction operation)}}
{{#if (notCustomOp operation)}}
        /// <summary>
        /// Validate the request to {{getOperationAction operation}} the {{res.name}} resource.
        /// </summary>
{{#each operation.parameters as |parameter index |}}
        /// <param name="{{parameter.name}}">
        {{> renderComment content=parameter.description}}
        /// </param>
{{/each}}
        /// <returns> A ValidationResponse indicating the validity of the {{getOperationAction operation}} request.</returns>
        [HttpPost]
        [Route({{res.serviceName}}ServiceRoutes.{{res.name}}Validate{{getOperationAction operation}})]
        [ProducesResponseType((int)HttpStatusCode.OK, Type = typeof(ValidationResponse))]
        public async Task<IActionResult> Validate{{getOperationAction operation}}Async({{decl operation}})
        {
            _logValidate{{getOperationAction operation}}(_logger, null);

{{#if (isDefined operation.requestParameter)}}
            var modelValidation = ValidationHelpers.ValidateModel({{operation.requestParameter.name}});
            if (modelValidation.IsValid)
            {
                modelValidation = await OnValidate{{getOperationAction operation}}({{call operation}});
            }
{{else}}
            var modelValidation = await OnValidate{{getOperationAction operation}}({{call operation}});
{{/if}}
            return Ok(modelValidation);
        }

        protected virtual Task<ValidationResponse> OnValidate{{getOperationAction operation}}({{decl operation}})
        {
            return Task.FromResult(ValidationResponse.Valid);
        }
{{#unless @first}}

{{/unless}}
{{#if (ne (getOperationAction operation) "Read")}}
        /// <summary>
        /// Called after the end of the request to {{getOperationAction operation}} the {{res.name}} resource.
        /// </summary>
{{#each operation.parameters as |parameter index|}}
        /// <param name="{{parameter.name}}">
        {{> renderComment content=parameter.description}}
        /// </param>
{{/each}}
        [HttpPost]
        [Route({{res.serviceName}}ServiceRoutes.{{res.name}}End{{getOperationAction operation}})]
        [ProducesResponseType((int)HttpStatusCode.OK, Type = typeof(void))]
        public async Task<IActionResult> End{{getOperationAction operation}}Async({{decl operation}})
        {
            _logEnd{{getOperationAction operation}}(_logger, null);

            await OnEnd{{getOperationAction operation}}({{call operation}});
            return Ok();
        }

        protected virtual Task OnEnd{{getOperationAction operation}}({{decl operation}})
        {
            return Task.CompletedTask;
        }
{{/if}}
{{/if}}

        /// <summary>
        /// {{getOperationAction operation}} the {{res.name}} resource.
        /// </summary>
{{#each operation.parameters as |parameter index|}}
        /// <param name="{{parameter.name}}">
        {{> renderComment content=parameter.description}}
        /// </param>
{{/each}}
        /// <returns> The {{res.name}} resource.</returns>
        [Http{{#if (eqi operation.verb "GET")}}Post{{else}}{{initialCaps operation.verb}}{{/if}}]
        [Route({{res.serviceName}}ServiceRoutes.{{res.name}}{{#if (eqi operation.verb "GET")}}BeginRead{{else}}Item{{/if}}{{#unless (notCustomOp operation)}}{{operation.name}}{{/unless}})]
        [ProducesResponseType((int)HttpStatusCode.OK, Type = typeof({{operation.returnType}}))]
{{#if (or (eq (getOperationAction operation) "Create") (eq (getOperationAction operation) "Patch"))}}
        [ProducesResponseType((int)HttpStatusCode.Created, Type = typeof({{operation.returnType}}))]
{{/if}}
{{#if (eqi operation.verb "POST")}}
        [ProducesResponseType((int)HttpStatusCode.Accepted, Type = typeof(void))]
{{/if}}
{{#if (eqi operation.verb "DELETE")}}
        [ProducesResponseType((int)HttpStatusCode.NoContent, Type = typeof(void))]
{{/if}}
        public async Task<IActionResult> Begin{{getOperationAction operation}}Async({{decl operation}})
        {
            _logBegin{{getOperationAction operation}}(_logger, null);

{{#if operation.requestParameter}}
            {{operation.requestParameter.name}} = {{operation.requestParameter.name}} ?? throw new ArgumentNullException(nameof({{operation.requestParameter.name}}));
{{/if}}
            if (Request is null)
            {
                _logRequestNull(_logger, null);
                return BadRequest("Request is null");
            }

            var result = await On{{getOperationAction operation}}Async({{call operation }});
            return result;
        }

        protected virtual Task<IActionResult> On{{getOperationAction operation}}Async({{decl operation}})
        {
{{#if (eqi operation.verb "PATCH")}}
            return Task.FromResult<IActionResult>(Ok({{ bodyParamName operation }}));
{{else}}
            return Task.FromResult<IActionResult>(Ok());
{{/if}}
        }
{{/if}}
{{#unless @last}}

{{/unless}}
{{/each}}
{{#if (and res.resourceTypePath includeSubscriptionLifeCycleController)}}

        /// <summary>
        /// Listens for changes to the customer subscription with respect to the {{res.name}} resource.
        /// </summary>
        /// <param name="subscriptionId">
        /// The ID of the target subscription.
        /// </param>
        /// <param name="body">
        /// The subscription registration state.
        /// </param>
        [HttpPut]
        [Route({{res.serviceName}}ServiceRoutes.{{res.name}}SubscriptionLifeCycleNotification)]
        [ProducesResponseType((int)HttpStatusCode.OK)]
        public async Task<IActionResult> SubscriptionLifeCycleNotification(string subscriptionId, RegistrationStatePayload body)
        {
            _logSubLifeCycleNotification(_logger, null);

            await OnSubLifeCycleNotification(subscriptionId, body);

            return Ok();
        }

        protected virtual Task OnSubLifeCycleNotification(string subscriptionId, RegistrationStatePayload body)
        {
            return Task.CompletedTask;
        }
{{/if}}
    }
}
{{/with}}
