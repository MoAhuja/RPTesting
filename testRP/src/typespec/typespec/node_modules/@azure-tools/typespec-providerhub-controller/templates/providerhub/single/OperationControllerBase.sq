// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated />

using System;
using System.Net;
{{#if includeCancellationToken}}
using System.Threading;
{{/if}}
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Microsoft.TypeSpec.ProviderHub.Controller;

using {{nameSpace}}.Service.Models;

namespace {{nameSpace}}.Service.Controllers
{
    public abstract class OperationControllerBase : Controller
    {
        private static readonly Action<ILogger, Exception> _logListOperations;

        protected readonly ILogger<OperationControllerBase> _logger;

        static OperationControllerBase()
        {
            _logListOperations = LoggerMessage.Define(
                LogLevel.Information,
                new EventId(1, "ListOperations"),
                "ListOperationsAsync()");
        }

        protected OperationControllerBase(ILogger<OperationControllerBase> logger) =>
            _logger = logger;

        /// <summary>
        /// List all operations provided by {{nameSpace}}.
        /// </summary>
{{#if includeCancellationToken}}
        // <param name="cancellationToken">The cancellation token.</>
{{/if}}
        /// <returns> The list of {{nameSpace}} operations.</returns>
        [HttpGet]
        [Route({{serviceName}}ServiceRoutes.ListOperations)]
        [ProducesResponseType((int)HttpStatusCode.OK, Type = typeof(OperationListResult))]
        public async Task<IActionResult> ListOperationsAsync({{#if includeCancellationToken}}CancellationToken cancellationToken{{/if}})
        {
            _logListOperations(_logger, null);

            var list = await OnOperationListAsync(Request{{#if includeCancellationToken}}, cancellationToken{{/if}});
            return Ok(list);
        }

        protected abstract Task<OperationListResult> OnOperationListAsync(HttpRequest request{{#if includeCancellationToken}}, CancellationToken cancellationToken{{/if}});
    }
}
