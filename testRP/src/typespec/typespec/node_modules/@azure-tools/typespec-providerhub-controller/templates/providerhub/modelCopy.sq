// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated />

using System;
using System.ComponentModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Microsoft.TypeSpec.ProviderHub.Controller;

namespace Microsoft.{{serviceName}}.Service.Models
{
    /// <summary>
    /// Helper for merging canonical {{name}} models as part of a PUT or PATCH operation
    /// </summary>
    public partial class {{name}}CopyHelper
    {
        /// <summary>
        /// Extensibility point: perform actions before data is copied
        /// </summary>
        /// <param name="source">The source {{name}}</param>
        /// <param name="target">The target {{name}}</param>
        partial void OnBeginCopyForPatch({{name}} source, {{name}} target);

        /// <summary>
        /// Extensibility point: perform actions after data is copied
        /// </summary>
        /// <param name="source">The source {{name}}</param>
        /// <param name="target">The target {{name}}</param>
        partial void OnEndCopyForPatch({{name}} source, {{name}} target);

        /// <summary>
        /// Copy the properties of a source {{name}} to a target {{name}}, using PATCH semantics
        /// </summary>
        /// <param name="source">The source {{name}}</param>
        /// <param name="target">The target {{name}}</param>
        public void CopyForPatch({{name}} source, {{name}} target)
        {
{{#if (or isVersioned hasVersionedAncestor)}}
            var version = source.VersionInfo;
{{/if}}
            var serialization = source.SerializationInfo;
            OnBeginCopyForPatch(source, target);
{{#with this  as | model |}}
{{#each properties}}
{{#if (or model.isVersioned model.hasVersionedAncestor)}}
            if (version.IsContractProperty(nameof(source.{{name}})) && serialization.IsSerializedProperty(nameof(source.{{name}})))
                target.{{name}} = source.{{name}};
{{else}}
            if (serialization.IsSerializedProperty(nameof(source.{{name}})))
                target.{{name}} = source.{{name}};
{{/if}}
{{/each}}
{{/with}}
            OnEndCopyForPatch(source, target);
        }

        /// <summary>
        /// Extensibility point: perform actions before data is copied
        /// </summary>
        /// <param name="source">The source {{name}}</param>
        /// <param name="target">The target {{name}}</param>
        partial void OnBeginCopyForPut({{name}} source, {{name}} target);

        /// <summary>
        /// Extensibility point: perform actions after data is copied
        /// </summary>
        /// <param name="source">The source {{name}}</param>
        /// <param name="target">The target {{name}}</param>
        partial void OnEndCopyForPut({{name}} source, {{name}} target);

        /// <summary>
        /// Copy the properties of a source {{name}} to a target {{name}}, using PUT semantics
        /// </summary>
        /// <param name="source">The source {{name}}</param>
        /// <param name="target">The target {{name}}</param>
        public void CopyForPut({{name}} source, {{name}} target)
        {
{{#if (or isVersioned hasVersionedAncestor)}}
            var version = source.VersionInfo;
{{/if}}
            var serialization = source.SerializationInfo;
            OnBeginCopyForPut(source, target);
{{#with this  as | model |}}
{{#each properties}}
{{#if (or ../isVersioned ../hasVersionedAncestor)}}
            if (version.IsContractProperty(nameof(source.{{name}})))
                target.{{name}} = source.{{name}};
{{else}}
            target.{{name}} = source.{{name}};
{{/if}}
{{/each}}
{{/with}}
            OnEndCopyForPut(source, target);
        }
    }
}
