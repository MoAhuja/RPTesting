export interface ProviderhubControllerEmitterOptions {
    /**
     * Override compiler output-dir
     */
    "output-dir"?: string;
    /**
     * Determines whether a tenant-level ("tenant") or subscription-level ("subscription") status monitor is used for long-running operations. By default, uses the tenant-level status monitor provided by RPaaS.
     */
    "operation-polling-location"?: "tenant" | "subscription";
    /**
     * When set to a valid path, generates provider and type registration documents to the specified path.
     * These can be used to register your resource provider and your resource types with RPaaS, for later creation of your manifest.
     */
    "registration-output-path"?: string;
    /**
     * When set to 'controller' , generates only controller code and assume that the model will be generated in separate process.
     * When set to 'model' , generates only model code and assume that the controller will be generated in separate process.
     */
    "code-kind"?: "controller" | "model";
    /**
     * An `OperationController` will be generated to handle operation endpoint requests in your service.
     * This is not enabled by default since most ProviderHub services will use the operation endpoint that is provided automatically by Azure Resource Manager.
     */
    "include-operation-controller"?: boolean;
    /**
     * When set to true, generates controller action methods with a System.Threading.CancellationToken parameter.
     */
    "include-cancellation-token"?: boolean;
    /**
     * A `SubscriptionLifeCycleNotification` controller will be generated to handle subscription life cycle notification requests in your service.
     * This is only enabled by default for new projects.
     */
    "include-subscription-lifecycle-controller"?: boolean;
    /**
     * When set to true, generates versioning classes regardless the number of API versions defined in the spec.
     */
    "include-versioning-classes"?: boolean;
}
export declare const $lib: import("@typespec/compiler").TypeSpecLibrary<{
    "no-provider-namespace": {
        readonly default: "There is no namespace marked with @armProviderNamespace.";
    };
    "no-resource-operations": {
        readonly default: import("@typespec/compiler").CallableMessage<[string]>;
    };
    "no-resource-read-or-create-operation": {
        readonly default: import("@typespec/compiler").CallableMessage<[string]>;
    };
    "no-union": {
        readonly default: "ProviderHub types may not use unions";
    };
    "creating-file": {
        readonly default: import("@typespec/compiler").CallableMessage<[string, string]>;
    };
    "writing-file": {
        readonly default: import("@typespec/compiler").CallableMessage<[string, string]>;
    };
    "cleaning-dir": {
        readonly default: import("@typespec/compiler").CallableMessage<[string]>;
    };
    "creating-dir": {
        readonly default: import("@typespec/compiler").CallableMessage<[string]>;
    };
    "copy-files": {
        readonly default: import("@typespec/compiler").CallableMessage<[string]>;
    };
    "generating-resource": {
        readonly default: import("@typespec/compiler").CallableMessage<[string, string, string]>;
    };
    "generating-model": {
        readonly default: import("@typespec/compiler").CallableMessage<[string, string, string]>;
    };
    "invalid-response": {
        readonly default: import("@typespec/compiler").CallableMessage<[string]>;
    };
    "invalid-identifier": {
        readonly default: import("@typespec/compiler").CallableMessage<[string, string]>;
    };
    "missing-type-parent": {
        readonly default: import("@typespec/compiler").CallableMessage<[string, string]>;
    };
    "no-inline-properties": {
        readonly default: import("@typespec/compiler").CallableMessage<[string, string]>;
    };
    "no-numeric": {
        readonly default: "Type 'numeric' is a generic type that cannot be instantiated.  Please specify a specific numeric type, like 'int32' or 'float64'";
    };
    "unrecognized-scalar": {
        readonly default: import("@typespec/compiler").CallableMessage<[string]>;
    };
    "no-versioned-dependencies": {
        readonly default: "Versioned dependencies are not currently allowed.  You may only version the current service specification";
    };
    fstat: {
        readonly default: import("@typespec/compiler").CallableMessage<[string]>;
    };
}, ProviderhubControllerEmitterOptions, never>;
export declare const reportDiagnostic: <C extends "no-provider-namespace" | "no-resource-operations" | "no-resource-read-or-create-operation" | "no-union" | "creating-file" | "writing-file" | "cleaning-dir" | "creating-dir" | "copy-files" | "generating-resource" | "generating-model" | "invalid-response" | "invalid-identifier" | "missing-type-parent" | "no-inline-properties" | "no-numeric" | "unrecognized-scalar" | "no-versioned-dependencies" | "fstat", M extends keyof {
    "no-provider-namespace": {
        readonly default: "There is no namespace marked with @armProviderNamespace.";
    };
    "no-resource-operations": {
        readonly default: import("@typespec/compiler").CallableMessage<[string]>;
    };
    "no-resource-read-or-create-operation": {
        readonly default: import("@typespec/compiler").CallableMessage<[string]>;
    };
    "no-union": {
        readonly default: "ProviderHub types may not use unions";
    };
    "creating-file": {
        readonly default: import("@typespec/compiler").CallableMessage<[string, string]>;
    };
    "writing-file": {
        readonly default: import("@typespec/compiler").CallableMessage<[string, string]>;
    };
    "cleaning-dir": {
        readonly default: import("@typespec/compiler").CallableMessage<[string]>;
    };
    "creating-dir": {
        readonly default: import("@typespec/compiler").CallableMessage<[string]>;
    };
    "copy-files": {
        readonly default: import("@typespec/compiler").CallableMessage<[string]>;
    };
    "generating-resource": {
        readonly default: import("@typespec/compiler").CallableMessage<[string, string, string]>;
    };
    "generating-model": {
        readonly default: import("@typespec/compiler").CallableMessage<[string, string, string]>;
    };
    "invalid-response": {
        readonly default: import("@typespec/compiler").CallableMessage<[string]>;
    };
    "invalid-identifier": {
        readonly default: import("@typespec/compiler").CallableMessage<[string, string]>;
    };
    "missing-type-parent": {
        readonly default: import("@typespec/compiler").CallableMessage<[string, string]>;
    };
    "no-inline-properties": {
        readonly default: import("@typespec/compiler").CallableMessage<[string, string]>;
    };
    "no-numeric": {
        readonly default: "Type 'numeric' is a generic type that cannot be instantiated.  Please specify a specific numeric type, like 'int32' or 'float64'";
    };
    "unrecognized-scalar": {
        readonly default: import("@typespec/compiler").CallableMessage<[string]>;
    };
    "no-versioned-dependencies": {
        readonly default: "Versioned dependencies are not currently allowed.  You may only version the current service specification";
    };
    fstat: {
        readonly default: import("@typespec/compiler").CallableMessage<[string]>;
    };
}[C]>(program: import("@typespec/compiler").Program, diag: import("@typespec/compiler").DiagnosticReport<{
    "no-provider-namespace": {
        readonly default: "There is no namespace marked with @armProviderNamespace.";
    };
    "no-resource-operations": {
        readonly default: import("@typespec/compiler").CallableMessage<[string]>;
    };
    "no-resource-read-or-create-operation": {
        readonly default: import("@typespec/compiler").CallableMessage<[string]>;
    };
    "no-union": {
        readonly default: "ProviderHub types may not use unions";
    };
    "creating-file": {
        readonly default: import("@typespec/compiler").CallableMessage<[string, string]>;
    };
    "writing-file": {
        readonly default: import("@typespec/compiler").CallableMessage<[string, string]>;
    };
    "cleaning-dir": {
        readonly default: import("@typespec/compiler").CallableMessage<[string]>;
    };
    "creating-dir": {
        readonly default: import("@typespec/compiler").CallableMessage<[string]>;
    };
    "copy-files": {
        readonly default: import("@typespec/compiler").CallableMessage<[string]>;
    };
    "generating-resource": {
        readonly default: import("@typespec/compiler").CallableMessage<[string, string, string]>;
    };
    "generating-model": {
        readonly default: import("@typespec/compiler").CallableMessage<[string, string, string]>;
    };
    "invalid-response": {
        readonly default: import("@typespec/compiler").CallableMessage<[string]>;
    };
    "invalid-identifier": {
        readonly default: import("@typespec/compiler").CallableMessage<[string, string]>;
    };
    "missing-type-parent": {
        readonly default: import("@typespec/compiler").CallableMessage<[string, string]>;
    };
    "no-inline-properties": {
        readonly default: import("@typespec/compiler").CallableMessage<[string, string]>;
    };
    "no-numeric": {
        readonly default: "Type 'numeric' is a generic type that cannot be instantiated.  Please specify a specific numeric type, like 'int32' or 'float64'";
    };
    "unrecognized-scalar": {
        readonly default: import("@typespec/compiler").CallableMessage<[string]>;
    };
    "no-versioned-dependencies": {
        readonly default: "Versioned dependencies are not currently allowed.  You may only version the current service specification";
    };
    fstat: {
        readonly default: import("@typespec/compiler").CallableMessage<[string]>;
    };
}, C, M>) => void, getTracer: (program: import("@typespec/compiler").Program) => import("@typespec/compiler").Tracer;
//# sourceMappingURL=lib.d.ts.map