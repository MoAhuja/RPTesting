import { createTypeSpecLibrary, paramMessage } from "@typespec/compiler";
const EmitterOptionsSchema = {
    type: "object",
    additionalProperties: false,
    properties: {
        "output-dir": { type: "string", nullable: true, description: "Override compiler output-dir" },
        "operation-polling-location": {
            type: "string",
            nullable: true,
            enum: ["tenant", "subscription"],
            description: `Determines whether a tenant-level ("tenant") or subscription-level ("subscription") status monitor is used for long-running operations. By default, uses the tenant-level status monitor provided by RPaaS.`,
        },
        "controller-host": { type: "string", nullable: true, enum: ["providerhub", "liftr"] },
        "registration-output-path": {
            type: "string",
            nullable: true,
            description: [
                "When set to a valid path, generates provider and type registration documents to the specified path.",
                "These can be used to register your resource provider and your resource types with RPaaS, for later creation of your manifest.",
            ].join("\n"),
        },
        "code-kind": {
            type: "string",
            nullable: true,
            enum: ["controller", "model"],
            description: [
                "When set to 'controller' , generates only controller code and assume that the model will be generated in separate process.",
                "When set to 'model' , generates only model code and assume that the controller will be generated in separate process.",
            ].join("\n"),
        },
        "include-operation-controller": {
            type: "boolean",
            nullable: true,
            default: false,
            description: [
                "An `OperationController` will be generated to handle operation endpoint requests in your service.",
                "This is not enabled by default since most ProviderHub services will use the operation endpoint that is provided automatically by Azure Resource Manager.",
            ].join("\n"),
        },
        "include-cancellation-token": {
            type: "boolean",
            nullable: true,
            default: false,
            description: "When set to true, generates controller action methods with a System.Threading.CancellationToken parameter.",
        },
        "include-subscription-lifecycle-controller": {
            type: "boolean",
            nullable: true,
            default: false,
            description: [
                "When set to true, generates a SubscriptionLifeCycleNotification controller that handles changes to the customer subscriptions registered to your RP.",
                "This is not enabled by default since existing UserRPs will likely have their own implementation. Enabled in the template config for new RPs.",
            ].join("\n"),
        },
        "include-versioning-classes": {
            type: "boolean",
            nullable: true,
            default: false,
            description: "When set to true, generates versioning classes regardless the number of API versions defined in the spec.",
        },
    },
    required: [],
};
export const $lib = createTypeSpecLibrary({
    name: "@azure-tools/typespec-providerhub-controller",
    diagnostics: {
        "no-provider-namespace": {
            severity: "error",
            messages: {
                default: "There is no namespace marked with @armProviderNamespace.",
            },
        },
        "no-resource-operations": {
            severity: "warning",
            messages: {
                default: paramMessage `Resource '${"resource"}' has no operations interface.  Please define an interface that contains operations for this resource.`,
            },
        },
        "no-resource-read-or-create-operation": {
            severity: "warning",
            messages: {
                default: paramMessage `Resource '${"resource"}' has no GET or PUT operation in its operation interface.  Please define an interface that contains at least a GET or PUT operation for this resource.`,
            },
        },
        "no-union": {
            severity: "error",
            messages: {
                default: "ProviderHub types may not use unions",
            },
        },
        "creating-file": {
            severity: "error",
            messages: {
                default: paramMessage `Error creating single file: ${"filename"},  ${"error"}`,
            },
        },
        "writing-file": {
            severity: "error",
            messages: {
                default: paramMessage `Error writing single file: ${"filename"},  ${"error"}`,
            },
        },
        "cleaning-dir": {
            severity: "error",
            messages: {
                default: paramMessage `Error cleaning output directory:  ${"error"}`,
            },
        },
        "creating-dir": {
            severity: "error",
            messages: {
                default: paramMessage `Error creating output directory:  ${"error"}`,
            },
        },
        "copy-files": {
            severity: "error",
            messages: {
                default: paramMessage `Error copying model files: ${"error"}`,
            },
        },
        "generating-resource": {
            severity: "error",
            messages: {
                default: paramMessage `Error generating resource: ${"namespace"}.${"resourceName"}, ${"error"}`,
            },
        },
        "generating-model": {
            severity: "error",
            messages: {
                default: paramMessage `Error generating model: ${"namespace"}.${"modelName"}, ${"error"}`,
            },
        },
        "invalid-response": {
            severity: "error",
            messages: {
                default: paramMessage `Invalid response for operation: ${"operationName"}`,
            },
        },
        "invalid-identifier": {
            severity: "error",
            messages: {
                default: paramMessage `Invalid identifier '${"identifier"}' in ${"location"}`,
            },
        },
        "missing-type-parent": {
            severity: "error",
            messages: {
                default: paramMessage `No parent found for ${"type"} ${"name"} `,
            },
        },
        "no-inline-properties": {
            severity: "error",
            messages: {
                default: paramMessage `Property ${"propertyName"} of model ${"modelName"} is an inline declaration - you must explicitly declare the types of properties as models before usage.`,
            },
        },
        "no-numeric": {
            severity: "error",
            messages: {
                default: "Type 'numeric' is a generic type that cannot be instantiated.  Please specify a specific numeric type, like 'int32' or 'float64'",
            },
        },
        "unrecognized-scalar": {
            severity: "error",
            messages: {
                default: paramMessage `Scalar type ${"typeName"} is not a recognized scalar type.  Please use or extend a built-in scalar type.`,
            },
        },
        "no-versioned-dependencies": {
            severity: "error",
            messages: {
                default: "Versioned dependencies are not currently allowed.  You may only version the current service specification",
            },
        },
        fstat: {
            severity: "error",
            messages: {
                default: paramMessage `fstat error: ${"error"}`,
            },
        },
    },
    emitter: {
        options: EmitterOptionsSchema,
    },
    requireImports: ["@azure-tools/typespec-providerhub"],
});
export const { reportDiagnostic, getTracer } = $lib;
//# sourceMappingURL=lib.js.map