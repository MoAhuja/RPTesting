var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ReferenceCycle_entries;
import { getTypeName } from "../core/index.js";
/**
 * Represent a reference cycle.
 * The cycle entries will always start with a declaration if there is one in the cycle.
 */
export class ReferenceCycle {
    constructor(entries) {
        _ReferenceCycle_entries.set(this, void 0);
        const firstDeclarationIndex = entries.findIndex((entry) => entry.entity.kind === "declaration");
        this.containsDeclaration = firstDeclarationIndex !== -1;
        __classPrivateFieldSet(this, _ReferenceCycle_entries, this.containsDeclaration
            ? [...entries.slice(firstDeclarationIndex), ...entries.slice(0, firstDeclarationIndex)]
            : entries, "f");
    }
    get first() {
        return __classPrivateFieldGet(this, _ReferenceCycle_entries, "f")[0];
    }
    [(_ReferenceCycle_entries = new WeakMap(), Symbol.iterator)]() {
        return __classPrivateFieldGet(this, _ReferenceCycle_entries, "f")[Symbol.iterator]();
    }
    [Symbol.toStringTag]() {
        return [...__classPrivateFieldGet(this, _ReferenceCycle_entries, "f"), __classPrivateFieldGet(this, _ReferenceCycle_entries, "f")[0]].map((x) => getTypeName(x.type)).join(" -> ");
    }
    toString() {
        return this[Symbol.toStringTag]();
    }
}
//# sourceMappingURL=reference-cycle.js.map