/**
 * AST types
 */
export var SyntaxKind;
(function (SyntaxKind) {
    SyntaxKind[SyntaxKind["TypeSpecScript"] = 0] = "TypeSpecScript";
    /** @deprecated Use TypeSpecScript */
    SyntaxKind[SyntaxKind["CadlScript"] = 0] = "CadlScript";
    SyntaxKind[SyntaxKind["JsSourceFile"] = 1] = "JsSourceFile";
    SyntaxKind[SyntaxKind["ImportStatement"] = 2] = "ImportStatement";
    SyntaxKind[SyntaxKind["Identifier"] = 3] = "Identifier";
    SyntaxKind[SyntaxKind["AugmentDecoratorStatement"] = 4] = "AugmentDecoratorStatement";
    SyntaxKind[SyntaxKind["DecoratorExpression"] = 5] = "DecoratorExpression";
    SyntaxKind[SyntaxKind["DirectiveExpression"] = 6] = "DirectiveExpression";
    SyntaxKind[SyntaxKind["MemberExpression"] = 7] = "MemberExpression";
    SyntaxKind[SyntaxKind["NamespaceStatement"] = 8] = "NamespaceStatement";
    SyntaxKind[SyntaxKind["UsingStatement"] = 9] = "UsingStatement";
    SyntaxKind[SyntaxKind["OperationStatement"] = 10] = "OperationStatement";
    SyntaxKind[SyntaxKind["OperationSignatureDeclaration"] = 11] = "OperationSignatureDeclaration";
    SyntaxKind[SyntaxKind["OperationSignatureReference"] = 12] = "OperationSignatureReference";
    SyntaxKind[SyntaxKind["ModelStatement"] = 13] = "ModelStatement";
    SyntaxKind[SyntaxKind["ModelExpression"] = 14] = "ModelExpression";
    SyntaxKind[SyntaxKind["ModelProperty"] = 15] = "ModelProperty";
    SyntaxKind[SyntaxKind["ModelSpreadProperty"] = 16] = "ModelSpreadProperty";
    SyntaxKind[SyntaxKind["ScalarStatement"] = 17] = "ScalarStatement";
    SyntaxKind[SyntaxKind["InterfaceStatement"] = 18] = "InterfaceStatement";
    SyntaxKind[SyntaxKind["UnionStatement"] = 19] = "UnionStatement";
    SyntaxKind[SyntaxKind["UnionVariant"] = 20] = "UnionVariant";
    SyntaxKind[SyntaxKind["EnumStatement"] = 21] = "EnumStatement";
    SyntaxKind[SyntaxKind["EnumMember"] = 22] = "EnumMember";
    SyntaxKind[SyntaxKind["EnumSpreadMember"] = 23] = "EnumSpreadMember";
    SyntaxKind[SyntaxKind["AliasStatement"] = 24] = "AliasStatement";
    SyntaxKind[SyntaxKind["DecoratorDeclarationStatement"] = 25] = "DecoratorDeclarationStatement";
    SyntaxKind[SyntaxKind["FunctionDeclarationStatement"] = 26] = "FunctionDeclarationStatement";
    SyntaxKind[SyntaxKind["FunctionParameter"] = 27] = "FunctionParameter";
    SyntaxKind[SyntaxKind["UnionExpression"] = 28] = "UnionExpression";
    SyntaxKind[SyntaxKind["IntersectionExpression"] = 29] = "IntersectionExpression";
    SyntaxKind[SyntaxKind["TupleExpression"] = 30] = "TupleExpression";
    SyntaxKind[SyntaxKind["ArrayExpression"] = 31] = "ArrayExpression";
    SyntaxKind[SyntaxKind["StringLiteral"] = 32] = "StringLiteral";
    SyntaxKind[SyntaxKind["NumericLiteral"] = 33] = "NumericLiteral";
    SyntaxKind[SyntaxKind["BooleanLiteral"] = 34] = "BooleanLiteral";
    SyntaxKind[SyntaxKind["StringTemplateExpression"] = 35] = "StringTemplateExpression";
    SyntaxKind[SyntaxKind["StringTemplateHead"] = 36] = "StringTemplateHead";
    SyntaxKind[SyntaxKind["StringTemplateMiddle"] = 37] = "StringTemplateMiddle";
    SyntaxKind[SyntaxKind["StringTemplateTail"] = 38] = "StringTemplateTail";
    SyntaxKind[SyntaxKind["StringTemplateSpan"] = 39] = "StringTemplateSpan";
    SyntaxKind[SyntaxKind["ExternKeyword"] = 40] = "ExternKeyword";
    SyntaxKind[SyntaxKind["VoidKeyword"] = 41] = "VoidKeyword";
    SyntaxKind[SyntaxKind["NeverKeyword"] = 42] = "NeverKeyword";
    SyntaxKind[SyntaxKind["UnknownKeyword"] = 43] = "UnknownKeyword";
    SyntaxKind[SyntaxKind["ValueOfExpression"] = 44] = "ValueOfExpression";
    SyntaxKind[SyntaxKind["TypeReference"] = 45] = "TypeReference";
    SyntaxKind[SyntaxKind["ProjectionReference"] = 46] = "ProjectionReference";
    SyntaxKind[SyntaxKind["TemplateParameterDeclaration"] = 47] = "TemplateParameterDeclaration";
    SyntaxKind[SyntaxKind["EmptyStatement"] = 48] = "EmptyStatement";
    SyntaxKind[SyntaxKind["InvalidStatement"] = 49] = "InvalidStatement";
    SyntaxKind[SyntaxKind["LineComment"] = 50] = "LineComment";
    SyntaxKind[SyntaxKind["BlockComment"] = 51] = "BlockComment";
    SyntaxKind[SyntaxKind["Doc"] = 52] = "Doc";
    SyntaxKind[SyntaxKind["DocText"] = 53] = "DocText";
    SyntaxKind[SyntaxKind["DocParamTag"] = 54] = "DocParamTag";
    SyntaxKind[SyntaxKind["DocReturnsTag"] = 55] = "DocReturnsTag";
    SyntaxKind[SyntaxKind["DocErrorsTag"] = 56] = "DocErrorsTag";
    SyntaxKind[SyntaxKind["DocTemplateTag"] = 57] = "DocTemplateTag";
    SyntaxKind[SyntaxKind["DocUnknownTag"] = 58] = "DocUnknownTag";
    SyntaxKind[SyntaxKind["Projection"] = 59] = "Projection";
    SyntaxKind[SyntaxKind["ProjectionParameterDeclaration"] = 60] = "ProjectionParameterDeclaration";
    SyntaxKind[SyntaxKind["ProjectionModelSelector"] = 61] = "ProjectionModelSelector";
    SyntaxKind[SyntaxKind["ProjectionModelPropertySelector"] = 62] = "ProjectionModelPropertySelector";
    SyntaxKind[SyntaxKind["ProjectionOperationSelector"] = 63] = "ProjectionOperationSelector";
    SyntaxKind[SyntaxKind["ProjectionUnionSelector"] = 64] = "ProjectionUnionSelector";
    SyntaxKind[SyntaxKind["ProjectionUnionVariantSelector"] = 65] = "ProjectionUnionVariantSelector";
    SyntaxKind[SyntaxKind["ProjectionInterfaceSelector"] = 66] = "ProjectionInterfaceSelector";
    SyntaxKind[SyntaxKind["ProjectionEnumSelector"] = 67] = "ProjectionEnumSelector";
    SyntaxKind[SyntaxKind["ProjectionEnumMemberSelector"] = 68] = "ProjectionEnumMemberSelector";
    SyntaxKind[SyntaxKind["ProjectionExpressionStatement"] = 69] = "ProjectionExpressionStatement";
    SyntaxKind[SyntaxKind["ProjectionIfExpression"] = 70] = "ProjectionIfExpression";
    SyntaxKind[SyntaxKind["ProjectionBlockExpression"] = 71] = "ProjectionBlockExpression";
    SyntaxKind[SyntaxKind["ProjectionMemberExpression"] = 72] = "ProjectionMemberExpression";
    SyntaxKind[SyntaxKind["ProjectionLogicalExpression"] = 73] = "ProjectionLogicalExpression";
    SyntaxKind[SyntaxKind["ProjectionEqualityExpression"] = 74] = "ProjectionEqualityExpression";
    SyntaxKind[SyntaxKind["ProjectionUnaryExpression"] = 75] = "ProjectionUnaryExpression";
    SyntaxKind[SyntaxKind["ProjectionRelationalExpression"] = 76] = "ProjectionRelationalExpression";
    SyntaxKind[SyntaxKind["ProjectionArithmeticExpression"] = 77] = "ProjectionArithmeticExpression";
    SyntaxKind[SyntaxKind["ProjectionCallExpression"] = 78] = "ProjectionCallExpression";
    SyntaxKind[SyntaxKind["ProjectionLambdaExpression"] = 79] = "ProjectionLambdaExpression";
    SyntaxKind[SyntaxKind["ProjectionLambdaParameterDeclaration"] = 80] = "ProjectionLambdaParameterDeclaration";
    SyntaxKind[SyntaxKind["ProjectionModelExpression"] = 81] = "ProjectionModelExpression";
    SyntaxKind[SyntaxKind["ProjectionModelProperty"] = 82] = "ProjectionModelProperty";
    SyntaxKind[SyntaxKind["ProjectionModelSpreadProperty"] = 83] = "ProjectionModelSpreadProperty";
    SyntaxKind[SyntaxKind["ProjectionSpreadProperty"] = 84] = "ProjectionSpreadProperty";
    SyntaxKind[SyntaxKind["ProjectionTupleExpression"] = 85] = "ProjectionTupleExpression";
    SyntaxKind[SyntaxKind["ProjectionStatement"] = 86] = "ProjectionStatement";
    SyntaxKind[SyntaxKind["ProjectionDecoratorReferenceExpression"] = 87] = "ProjectionDecoratorReferenceExpression";
    SyntaxKind[SyntaxKind["Return"] = 88] = "Return";
    SyntaxKind[SyntaxKind["JsNamespaceDeclaration"] = 89] = "JsNamespaceDeclaration";
    SyntaxKind[SyntaxKind["TemplateArgument"] = 90] = "TemplateArgument";
})(SyntaxKind || (SyntaxKind = {}));
export var IdentifierKind;
(function (IdentifierKind) {
    IdentifierKind[IdentifierKind["TypeReference"] = 0] = "TypeReference";
    IdentifierKind[IdentifierKind["TemplateArgument"] = 1] = "TemplateArgument";
    IdentifierKind[IdentifierKind["Decorator"] = 2] = "Decorator";
    IdentifierKind[IdentifierKind["Function"] = 3] = "Function";
    IdentifierKind[IdentifierKind["Using"] = 4] = "Using";
    IdentifierKind[IdentifierKind["Declaration"] = 5] = "Declaration";
    IdentifierKind[IdentifierKind["Other"] = 6] = "Other";
})(IdentifierKind || (IdentifierKind = {}));
/** Used to explicitly specify that a diagnostic has no target. */
export const NoTarget = Symbol.for("NoTarget");
export var ListenerFlow;
(function (ListenerFlow) {
    /**
     * Do not navigate any containing or referenced type.
     */
    ListenerFlow[ListenerFlow["NoRecursion"] = 1] = "NoRecursion";
})(ListenerFlow || (ListenerFlow = {}));
//# sourceMappingURL=types.js.map