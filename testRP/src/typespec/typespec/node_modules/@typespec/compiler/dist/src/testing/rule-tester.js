import { createDiagnosticCollector, navigateProgram, } from "../core/index.js";
import { createLinterRuleContext } from "../core/linter.js";
import { expectDiagnosticEmpty, expectDiagnostics } from "./expect.js";
export function createLinterRuleTester(runner, ruleDef, libraryName) {
    return {
        expect,
    };
    function expect(code) {
        return {
            toBeValid,
            toEmitDiagnostics,
        };
        async function toBeValid() {
            const diagnostics = await diagnose(code);
            expectDiagnosticEmpty(diagnostics);
        }
        async function toEmitDiagnostics(match) {
            const diagnostics = await diagnose(code);
            expectDiagnostics(diagnostics, match);
        }
    }
    async function diagnose(code) {
        await runner.diagnose(code);
        const diagnostics = createDiagnosticCollector();
        const rule = { ...ruleDef, id: `${libraryName}/${ruleDef.name}` };
        const context = createLinterRuleContext(runner.program, rule, diagnostics);
        const listener = ruleDef.create(context);
        navigateProgram(runner.program, listener);
        // No diagnostics should have been reported to the program. If it happened the rule is calling reportDiagnostic directly and should NOT be doing that.
        expectDiagnosticEmpty(runner.program.diagnostics);
        return diagnostics.diagnostics;
    }
}
//# sourceMappingURL=rule-tester.js.map